{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","checkbox","e","this","setState","target","checked","Form","Container","Row","id","Col","type","onChange","handleCheckbox","bind","class","pattern","max","disabled","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c9381c1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport './style.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col } from 'reactstrap';\nimport Form from 'react-bootstrap/Form';\n\nimport { Button } from 'reactstrap';\n\nexport default class App extends Component\n{ \n  constructor(){\n    super();\n\n    this.state = {\n     checkbox: true,\n     \n     \n    }\n}\n\nhandleCheckbox(e){\n   \n \n this.setState({checkbox: e.target.checked,\n     \n    })\n}\n\n\n  render()\n  {\n  return (\n\n    <Form>\n    <Container>\n  <Row id=\"r1\" >\n    <Col>Estate</Col>\n    <Col>5-6 passengers</Col>\n    <Col>7 passengers</Col>\n    <Col>8 passengers</Col>\n    <Col>9 passengers</Col>\n    <Col>14 passengers</Col>\n    <Col>16 passengers</Col>\n    \n  \n  </Row>\n\n  <Row id='r2' >\n  <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\" max='100' disabled={!this.state.checkbox} ></input>\n    <label id=\"c1\">%</label>\n    </Col>\n\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\" disabled={!this.state.checkbox}></input>\n    <label id=\"c1\">%</label>\n    </Col>\n  \n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\" disabled={!this.state.checkbox}></input>\n    <label id=\"c1\">%</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\" disabled={!this.state.checkbox}></input>\n    <label id=\"c1\">%</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox'onChange={this.handleCheckbox.bind(this)} checked={this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\" disabled={!this.state.checkbox}></input>\n    <label id=\"c1\">%</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\" disabled={!this.state.checkbox}></input>\n    <label id=\"c1\">%</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\" disabled={!this.state.checkbox}></input>\n    <label id=\"c1\">%</label>\n    </Col>\n    \n\n\n\n\n     \n  \n  </Row>\n \n\n  <Row id='r3' >\n  <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={!this.state.checkbox}></input>\n    <input type='text' class=\"inputt\"  pattern=\"[0-9]\"  disabled={this.state.checkbox}></input>\n    <label id=\"c1\">£</label>\n    </Col>\n\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={!this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\"  disabled={this.state.checkbox}></input>\n    <label id=\"c1\">£</label>\n    </Col>\n  \n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={!this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\"  disabled={this.state.checkbox}></input>\n    <label id=\"c1\">£</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={!this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\"  disabled={this.state.checkbox}></input>\n    <label id=\"c1\">£</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={!this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\"  disabled={this.state.checkbox}></input>\n    <label id=\"c1\">£</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={!this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\"  disabled={this.state.checkbox}></input>\n    <label id=\"c1\">£</label>\n    </Col>\n    <Col>\n    <input id=\"c1\"  type='checkBox' onChange={this.handleCheckbox.bind(this)} checked={!this.state.checkbox}></input>\n    <input type='text' class=\"inputt\" pattern=\"[0-9]{2}\"  disabled={this.state.checkbox}></input>\n    <label id=\"c1\">£</label>\n    </Col>\n    \n    \n    \n    \n \n     \n     \n  \n  </Row>\n \n  <input type=\"file\"  />\n  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</Container>\n\n</Form>\n  );\n\n  }\n   \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}